tags:
  - name: 'auth'
    description: 'Registration and Authentication'
  - name: 'todo'
    description: 'Everything about your ToDo List'
  - name: 'tags'
    description: 'Tag your ToDo items'
  - name: 'user'
    description: 'Operations about user'
paths:
  /register:
    post:
      tags:
        - 'auth'
      description: 'Register for using the ToDo Application.'
      operationId: 'registerUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Created user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/AuthModel'
          headers:
            X-Expires-After:
              type: 'string'
              format: 'date-time'
              description: 'date in UTC when token expires'
        400:
          description: 'Invalid user supplied'
  /login:
    post:
      tags:
        - 'auth'
      description: 'Logs user into the system'
      operationId: 'loginUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'The user credentials for login'
          required: true
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/LoginModel'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/AuthModel'
          headers:
            X-Expires-After:
              type: 'string'
              format: 'date-time'
              description: 'date in UTC when token expires'
        400:
          description: 'Invalid username/password supplied'
  /logout:
    get:
      tags:
        - 'auth'
      description: 'Logs out current logged in user session'
      operationId: 'logoutUser'
      produces:
        - 'application/json'
      parameters: []
      responses:
        default:
          description: 'successful operation'
  /todo:
    post:
      tags:
        - 'todo'
      description: 'Add a new ToDo'
      operationId: 'addTodo'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'ToDo Item'
          required: true
          schema:
            $ref: '#/definitions/TodoItem'
      responses:
        400:
          description: 'Bad Request'
        405:
          description: 'Invalid input'
      security:
        - basicAuth: []
  /users:
    get:
      tags:
        - 'user'
      description: 'Get list of all users'
      operationId: 'getAllUsers'
      produces:
        - 'application/json'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/User'
        404:
          description: 'User not found'
      security:
        - basicAuth: []
    post:
      tags:
        - 'user'
      description: 'Create a new user to assess the application'
      operationId: 'createUser'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Create user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        400:
          description: 'Invalid user supplied'
      security:
        - basicAuth: []
  '/users/{username}':
    get:
      tags:
        - 'user'
      description: 'Get user by username'
      operationId: 'getUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be fetched. Use user1 for testing.'
          required: true
          type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/User'
        400:
          description: 'Invalid username supplied'
        404:
          description: 'User not found'
      security:
        - basicAuth: []
    put:
      tags:
        - 'user'
      description: 'Update user details'
      operationId: 'updateUser'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'name that need to be updated'
          required: true
          type: 'string'
        - in: 'body'
          name: 'body'
          description: 'Updated user object'
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        400:
          description: 'Invalid user supplied'
        404:
          description: 'User not found'
      security:
        - basicAuth: []
    delete:
      tags:
        - 'user'
      description: 'Delete an user account'
      operationId: 'deleteUser'
      produces:
        - 'application/json'
      parameters:
        - name: 'username'
          in: 'path'
          description: 'The name that needs to be deleted'
          required: true
          type: 'string'
      responses:
        400:
          description: 'Invalid username supplied'
        404:
          description: 'User not found'
      security:
        - basicAuth: []
securityDefinitions:
  basicAuth:
    type: basic
definitions:
  LoginModel:
    type: 'object'
    properties:
      username:
        type: 'string'
      password:
        type: 'string'
  AuthModel:
    type: 'object'
    properties:
      username:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
  TodoItem:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      summary:
        type: 'string'
      description:
        type: 'string'
      dueDate:
        type: 'string'
        format: 'date-time'
        description: 'ToDo Item Due Date'
      status:
        type: 'integer'
        format: 'int32'
        description: 'ToDo Item Status'
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      username:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
      password:
        type: 'string'
      phone:
        type: 'string'
  Tag:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
  ApiResponse:
    type: 'object'
    properties:
      code:
        type: 'integer'
        format: 'int32'
      error:
        type: 'string'
      message:
        type: 'string'
